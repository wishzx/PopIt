// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Gender {
  Male
  Female
  Polygender
  Genderqueer
  Agender
  Genderfluid
  Nonbinary
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique @db.VarChar(64) // gmail max length
  password  String
  isAdmin   Boolean  @default(false)
  createdAt DateTime @default(now())

  first_name      String @db.VarChar(32)
  last_name       String @db.VarChar(32)
  instagram_uname String @unique @db.VarChar(30) //ig max uname char according to google
  gender          Gender

  content Content[]
  likes   Likes[]
  Message Message[]

  @@index([email], type: Hash) // for faster auth queries - hash allow only = <> but it's faster
}

/// @default(cuid()) 

model Challenge {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  name      String   @db.VarChar(255)
  //tags String[] @db.VarChar(16)
  tags      String   @db.VarChar(16)

  content Content[]
}

model Content {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  image_url String @db.VarChar(2048)
  likes     Int    @default(0) //@db.UnsignedInt 

  challenge_id String
  challenge    Challenge @relation(fields: [challenge_id], references: [id], onDelete: Cascade) // when challenge deleted i should delete also all content for that challenge  

  user_id String
  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade) // when user is deleted should delete all his content

  likes_ids Likes[]
  message Message[]

}

model Message {
  id String @id @default(cuid())

  user_id String
  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  content_id String
  content    Content @relation(fields: [content_id], references: [id], onDelete: Cascade)

  body String @db.VarChar(500)
}

// sql vs nosql vs graphdb ?  

model Likes {
  user_id String

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade) // if i delete a user i should delete also all likes from that user

  content_id String
  content    Content @relation(fields: [content_id], references: [id], onDelete: Cascade) // if i delete a content i should delete all likes of that content

  @@id([user_id, content_id])
}
